AWSTemplateFormatVersion: '2010-09-09'
Description: 'decodedmusic Auth & Subscription Lambda Functions'

Parameters:
  Environment:
    Type: String
    Default: prod

Resources:
  # Lambda Execution Role
  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-auth-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AuthLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: "*"

  # Auth Login Function
  AuthLoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-authLogin"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt AuthLambdaRole.Arn
      Code:
        ZipFile: |



              // Handle CORS preflight
              if (event.httpMethod === 'OPTIONS') {
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                          'Access-Control-Allow-Methods': 'POST,OPTIONS'
                      },
                      body: ''
                  };
              }

              try {
                  const body = event.body ? JSON.parse(event.body) : {};
                  const { email, password } = body;
    
                  if (!email || !password) {
                      throw new Error('Email and password are required');
                  }
    
                  // Mock authentication
                  const token = 'jwt-token-' + Date.now();
                  const userId = 'user-' + Math.random().toString(36).substr(2, 9);
    
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          success: true,
                          token: token,
                          user: {
                              id: userId,
                              email: email,
                              name: 'Artist User'
                          },
                          message: 'Login successful',
                          platform: 'decodedmusic'
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 400,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          success: false,
                          message: error.message
                      })
                  };
              }
          };
      Timeout: 30
      MemorySize: 128

  # Auth Signup Function
  AuthSignupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-authSignup"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt AuthLambdaRole.Arn
      Code:
        ZipFile: |



              // Handle CORS preflight
              if (event.httpMethod === 'OPTIONS') {
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                          'Access-Control-Allow-Methods': 'POST,OPTIONS'
                      },
                      body: ''
                  };
              }

              try {
                  const body = event.body ? JSON.parse(event.body) : {};
                  const { name, email, password, artistProfile } = body;
    
                  if (!name || !email || !password) {
                      throw new Error('Name, email, and password are required');
                  }
    
                  const userId = 'user-' + Math.random().toString(36).substr(2, 9);
    
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          success: true,
                          userId: userId,
                          user: {
                              id: userId,
                              name: name,
                              email: email,
                              artistProfile: artistProfile || {}
                          },
                          message: 'Account created successfully',
                          platform: 'decodedmusic'
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 400,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          success: false,
                          message: error.message
                      })
                  };
              }
          };
      Timeout: 30
      MemorySize: 128

  # Subscription Create Function
  SubscriptionCreateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-subscriptionCreate"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt AuthLambdaRole.Arn
      Code:
        ZipFile: |



              // Handle CORS preflight
              if (event.httpMethod === 'OPTIONS') {
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                          'Access-Control-Allow-Methods': 'POST,OPTIONS'
                      },
                      body: ''
                  };
              }

              try {
                  const body = event.body ? JSON.parse(event.body) : {};
                  const { userId, planType, paymentMethod } = body;
    
                  if (!userId || !planType) {
                      throw new Error('userId and planType are required');
                  }
    
                  // Pricing plans
                  const plans = {
                      'artist-starter': { name: 'Artist Starter', price: 19, features: ['Basic Analytics', 'Upload Music', 'Community Access'] },
                      'pro-creator': { name: 'Pro Creator', price: 89, features: ['Advanced Analytics', 'AI Insights', 'Marketing Tools'] },
                      'industry-pro': { name: 'Industry Pro', price: 249, features: ['Full Platform', 'Bedrock AI', 'Enterprise Features'] }
                  };
    
                  const plan = plans[planType] || plans['artist-starter'];
                  const subscriptionId = 'sub-' + Math.random().toString(36).substr(2, 9);
    
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          success: true,
                          subscriptionId: subscriptionId,
                          plan: plan,
                          userId: userId,
                          paymentUrl: 'https://checkout.stripe.com/pay/' + subscriptionId,
                          message: plan.name + ' subscription created successfully',
                          platform: 'decodedmusic'
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 400,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          success: false,
                          message: error.message
                      })
                  };
              }
          };
      Timeout: 30
      MemorySize: 128

Outputs:
  AuthLoginFunctionArn:
    Value: !GetAtt AuthLoginFunction.Arn
    Export:
      Name: !Sub "${Environment}-AuthLoginFunctionArn"
      
  AuthSignupFunctionArn:
    Value: !GetAtt AuthSignupFunction.Arn
    Export:
      Name: !Sub "${Environment}-AuthSignupFunctionArn"
      
  SubscriptionCreateFunctionArn:
    Value: !GetAtt SubscriptionCreateFunction.Arn
    Export:
      Name: !Sub "${Environment}-SubscriptionCreateFunctionArn"




