AWSTemplateFormatVersion: '2010-09-09'
Description: 'decodedmusic Subscription Stack - Price Revolution starting from $0.99'

Parameters:
  Environment:
    Type: String
    Default: prod
    Description: Environment name

  SupportEmail:
    Type: String
    Description: Email address for platform support

  LambdaCodeBucket:
    Type: String
    Default: decodedmusic-lambda-code

Resources:
  # Subscriptions Table
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-decodedmusic-subscriptions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: subscription_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: subscription-id-index
          KeySchema:
            - AttributeName: subscription_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Platform
          Value: decodedmusic
        - Key: Purpose
          Value: Subscription Management
        - Key: PriceRevolution
          Value: "starting from $0.99"

  # Subscription Lambda Role
  SubscriptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-subscription-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SubscriptionDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt SubscriptionsTable.Arn
                  - !Sub "${SubscriptionsTable.Arn}/index/*"

  # === Subscription Functions ===
  # SubscriptionCreateFunction -> Role: !GetAtt SubscriptionLambdaRole.Arn, S3Key: prod-dashboardStreams.zip, Env: SUBSCRIPTIONS_TABLE
  SubscriptionCreateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-subscriptionCreate"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SubscriptionLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: prod-dashboardStreams.zip
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          AWS_ACCOUNT_ID: "3969-1370-3024"
          SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
          PLATFORM_TAGLINE: "Created by artist, for artists"
          SUPPORT_EMAIL: !Ref SupportEmail
      Timeout: 30
      MemorySize: 256

Outputs:
  SubscriptionsTableName:
    Description: Subscriptions table name
    Value: !Ref SubscriptionsTable
    Export:
      Name: !Sub "${Environment}-SubscriptionsTable"

  SubscriptionCreateFunctionArn:
    Description: Subscription Create Function ARN
    Value: !GetAtt SubscriptionCreateFunction.Arn
    Export:
      Name: !Sub "${Environment}-SubscriptionCreateArn"

  SubscriptionCreateFunctionName:
    Description: Subscription Create Function Name
    Value: !Ref SubscriptionCreateFunction
    Export:
      Name: !Sub "${Environment}-SubscriptionCreateName"



