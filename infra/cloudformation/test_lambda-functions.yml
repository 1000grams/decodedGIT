# Complete automation script to fix all deployment issues

Write-Host "üéµ DECODEDMUSIC PLATFORM - AUTOMATED FIX & TEST" -ForegroundColor Cyan
Write-Host "Created by artist, for artists | AWS Account: 3969-1370-3024" -ForegroundColor Yellow

$currentDir = Get-Location
Write-Host "üìç Current Directory: $currentDir" -ForegroundColor Green

# Step 1: Create Lambda Function Tests
Write-Host "`nüß™ Creating Lambda Function Tests..." -ForegroundColor Green

# Create test directory
New-Item -ItemType Directory -Path "C:\decoded\tests" -Force | Out-Null
New-Item -ItemType Directory -Path "C:\decoded\tests\lambda" -Force | Out-Null

# Auth Login Test
@"
const AWS = require('aws-sdk');
const lambda = new AWS.Lambda({ region: 'eu-central-1' });

async function testAuthLogin() {
  console.log('üîê Testing Auth Login Function...');
  
  const testEvent = {
    httpMethod: 'POST',
    body: JSON.stringify({
      email: 'test@decodedmusic.com',
      password: 'testPassword123'
    })
  };
  
  const params = {
    FunctionName: 'prod-authLogin',
    Payload: JSON.stringify(testEvent)
  };
  
  try {
    const result = await lambda.invoke(params).promise();
    const response = JSON.parse(result.Payload);
    console.log('‚úÖ Auth Login Test Result:', response);
    return response.statusCode === 200;
  } catch (error) {
    console.error('‚ùå Auth Login Test Failed:', error);
    return false;
  }
}

async function testAuthSignup() {
  console.log('üìù Testing Auth Signup Function...');
  
  const testEvent = {
    httpMethod: 'POST',
    body: JSON.stringify({
      name: 'Test Artist',
      email: 'artist@decodedmusic.com',
      password: 'testPassword123'
    })
  };
  
  const params = {
    FunctionName: 'prod-authSignup',
    Payload: JSON.stringify(testEvent)
  };
  
  try {
    const result = await lambda.invoke(params).promise();
    const response = JSON.parse(result.Payload);
    console.log('‚úÖ Auth Signup Test Result:', response);
    return response.statusCode === 200;
  } catch (error) {
    console.error('‚ùå Auth Signup Test Failed:', error);
    return false;
  }
}

async function testSubscriptionCreate() {
  console.log('üí≥ Testing Subscription Create Function...');
  
  const testEvent = {
    httpMethod: 'POST',
    body: JSON.stringify({
      userId: 'test-user-123',
      planType: 'artist-starter'
    })
  };
  
  const params = {
    FunctionName: 'prod-subscriptionCreate',
    Payload: JSON.stringify(testEvent)
  };
  
  try {
    const result = await lambda.invoke(params).promise();
    const response = JSON.parse(result.Payload);
    console.log('‚úÖ Subscription Test Result:', response);
    return response.statusCode === 200;
  } catch (error) {
    console.error('‚ùå Subscription Test Failed:', error);
    return false;
  }
}

async function runAllTests() {
  console.log('üéµ Running decodedmusic Lambda Tests...\n');
  
  const tests = [
    testAuthLogin,
    testAuthSignup,
    testSubscriptionCreate
  ];
  
  let passed = 0;
  for (const test of tests) {
    if (await test()) {
      passed++;
    }
  }
  
  console.log(`\nüìä Test Results: ${passed}/${tests.length} tests passed`);
  if (passed === tests.length) {
    console.log('üéâ All Lambda functions working correctly!');
  } else {
    console.log('‚ö†Ô∏è Some Lambda functions need attention');
  }
}

if (require.main === module) {
  runAllTests();
}

module.exports = { testAuthLogin, testAuthSignup, testSubscriptionCreate };
"@ | Out-File -FilePath "C:\decoded\tests\lambda\lambda-tests.js" -Encoding utf8

Write-Host "‚úÖ Lambda tests created" -ForegroundColor Green

# Step 2: Fix File Organization - Move files to correct frontend directory
Write-Host "`nüìÅ Fixing file organization..." -ForegroundColor Green

# Verify source directories exist and move files
$sourceDirectories = @("C:\decoded\public", "C:\decoded\scripts", "C:\decoded\src")
$targetDir = "C:\decoded\frontend"

foreach ($sourceDir in $sourceDirectories) {
  if (Test-Path $sourceDir) {
    Write-Host "üì¶ Moving files from $sourceDir to $targetDir..." -ForegroundColor Yellow
    
    $targetSubDir = Join-Path $targetDir (Split-Path $sourceDir -Leaf)
    
    if (Test-Path $targetSubDir) {
      # Merge directories
      Copy-Item "$sourceDir\*" $targetSubDir -Recurse -Force
    } else {
      # Move entire directory
      Move-Item $sourceDir $targetSubDir -Force
    }
    
    Write-Host "‚úÖ Moved $sourceDir to $targetSubDir" -ForegroundColor Green
  } else {
    Write-Host "‚ö†Ô∏è Source directory not found: $sourceDir" -ForegroundColor Yellow
  }
}

# Step 3: Fix package.json JSON Error
Write-Host "`nüîß Fixing package.json..." -ForegroundColor Green

$packageJsonPath = "C:\decoded\frontend\package.json"
if (Test-Path $packageJsonPath) {
  # Read and fix package.json
  $packageContent = Get-Content $packageJsonPath -Raw
  
  # Create corrected package.json
  $fixedPackageJson = @{
    name = "decodedmusic-frontend"
    version = "1.0.0"
    description = "decodedmusic Platform - Created by artist, for artists"
    private = $true
    scripts = @{
      start = "react-scripts start"
      build = "react-scripts build"
      test = "react-scripts test"
      deploy = "npm run build && aws s3 sync build/ s3://decoded-genai-stack-webappne-websitebucket4326d7c2-jvplfkkey9mb --delete --region eu-central-1"
    }
    dependencies = @{
      react = "^18.2.0"
      "react-dom" = "^18.2.0"
      "react-router-dom" = "^6.8.1"
      "react-scripts" = "5.0.1"
      axios = "^1.6.0"
    }
    browserslist = @{
      production = @(">0.2%", "not dead", "not op_mini all")
      development = @("last 1 chrome version", "last 1 firefox version", "last 1 safari version")
    }
  }
  
  $fixedPackageJson | ConvertTo-Json -Depth 10 | Out-File $packageJsonPath -Encoding utf8
  Write-Host "‚úÖ package.json fixed" -ForegroundColor Green
} else {
  Write-Host "‚ùå package.json not found at $packageJsonPath" -ForegroundColor Red
}

# Step 4: Create essential React files if missing
Write-Host "`n‚öõÔ∏è Creating essential React files..." -ForegroundColor Green

# Create public/index.html
$publicDir = "C:\decoded\frontend\public"
New-Item -ItemType Directory -Path $publicDir -Force | Out-Null

@"
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>decodedmusic - Created by artist, for artists</title>
  <style>
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
  </style>
</head>
<body>
  <div id="root"></div>
</body>
</html>
"@ | Out-File -FilePath "$publicDir\index.html" -Encoding utf8

# Create src/index.js
$srcDir = "C:\decoded\frontend\src"
New-Item -ItemType Directory -Path $srcDir -Force | Out-Null

@"
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './App.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
"@ | Out-File -FilePath "$srcDir\index.js" -Encoding utf8

# Create src/App.js
@"
import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleLogin = async (email, password) => {
  setLoading(true);
  try {
    // This will connect to your deployed Lambda functions
    const response = await fetch('https://your-api-gateway-url/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, password })
    });
    
    const data = await response.json();
    if (data.success) {
    setUser(data.user);
    }
  } catch (error) {
    console.error('Login error:', error);
  }
  setLoading(false);
  };

  return (
  <div className="App">
    <header className="App-header">
    <h1>üéµ decodedmusic Platform</h1>
    <p>Created by artist, for artists</p>
    <div className="platform-info">
      <p>AWS Account: 3969-1370-3024</p>
      <p>Region: eu-central-1</p>
    </div>
    
    {user ? (
      <div className="user-dashboard">
      <h2>Welcome, {user.name || user.email}!</h2>
      <p>Platform: {user.platform}</p>
      </div>
    ) : (
      <div className="auth-section">
      <h3>Login to your account</h3>
      <button onClick={() => handleLogin('test@example.com', 'password123')}>
        {loading ? 'Logging in...' : 'Test Login'}
      </button>
      </div>
    )}
    </header>
  </div>
  );
}

export default App;
"@ | Out-File -FilePath "$srcDir\App.js" -Encoding utf8

# Create src/App.css
@"
.App {
  text-align: center;
  min-height: 100vh;
}

.App-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 40px 20px;
  color: white;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.App-header h1 {
  font-size: 3rem;
  margin-bottom: 10px;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.platform-info {
  background: rgba(255,255,255,0.1);
  padding: 20px;
  border-radius: 10px;
  margin: 20px 0;
}

.auth-section {
  background: rgba(255,255,255,0.1);
  padding: 30px;
  border-radius: 15px;
  margin: 20px 0;
}

.auth-section button {
  background: #ff6b6b;
  color: white;
  border: none;
  padding: 15px 30px;
  border-radius: 25px;
  font-size: 1.1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.auth-section button:hover {
  background: #ff5252;
  transform: translateY(-2px);
}

.user-dashboard {
  background: rgba(255,255,255,0.1);
  padding: 30px;
  border-radius: 15px;
  margin: 20px 0;
}
"@ | Out-File -FilePath "$srcDir\App.css" -Encoding utf8

Write-Host "‚úÖ React files created" -ForegroundColor Green

# Step 5: Build and Deploy
Write-Host "`nüèóÔ∏è Building React application..." -ForegroundColor Green

Push-Location "C:\decoded\frontend"

# Install dependencies if needed
if (-not (Test-Path "node_modules")) {
  Write-Host "üì¶ Installing dependencies..." -ForegroundColor Yellow
  npm install
}

# Build the application
Write-Host "üî® Building production build..." -ForegroundColor Yellow
npm run build

if ($LASTEXITCODE -eq 0) {
  Write-Host "‚úÖ Build successful!" -ForegroundColor Green
  
  # Deploy to S3
  Write-Host "`nüöÄ Deploying to S3..." -ForegroundColor Green
  aws s3 sync build/ s3://decoded-genai-stack-webappne-websitebucket4326d7c2-jvplfkkey9mb --delete --region eu-central-1
  
  if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Deployment successful!" -ForegroundColor Green
    
    # Get CloudFront distribution URL
    Write-Host "`nüåê Getting website URL..." -ForegroundColor Yellow
    $bucketUrl = "http://decoded-genai-stack-webappne-websitebucket4326d7c2-jvplfkkey9mb.s3-website.eu-central-1.amazonaws.com"
    Write-Host "üîó Website URL: $bucketUrl" -ForegroundColor Cyan
  } else {
    Write-Host "‚ùå Deployment failed" -ForegroundColor Red
  }
} else {
  Write-Host "‚ùå Build failed" -ForegroundColor Red
}

Pop-Location

# Step 6: Create deployment verification script
Write-Host "`n‚úÖ Creating verification script..." -ForegroundColor Green

@"
# Verification script for decodedmusic platform deployment
Write-Host "üéµ DECODEDMUSIC PLATFORM - DEPLOYMENT VERIFICATION" -ForegroundColor Cyan

# Check Lambda functions
Write-Host "`nüîç Checking Lambda functions..." -ForegroundColor Yellow
`$functions = @('prod-authLogin', 'prod-authSignup', 'prod-subscriptionCreate')

foreach (`$func in `$functions) {
  try {
    `$result = aws lambda get-function --function-name `$func --region eu-central-1 2>`$null
    if (`$result) {
      Write-Host "‚úÖ `$func exists" -ForegroundColor Green
    } else {
      Write-Host "‚ùå `$func not found" -ForegroundColor Red
    }
  } catch {
    Write-Host "‚ùå `$func not accessible" -ForegroundColor Red
  }
}

# Check S3 bucket
Write-Host "`nü™£ Checking S3 bucket..." -ForegroundColor Yellow
try {
  `$bucketCheck = aws s3 ls s3://decoded-genai-stack-webappne-websitebucket4326d7c2-jvplfkkey9mb --region eu-central-1
  Write-Host "‚úÖ S3 bucket accessible" -ForegroundColor Green
} catch {
  Write-Host "‚ùå S3 bucket not accessible" -ForegroundColor Red
}

# Check website
Write-Host "`nüåê Checking website..." -ForegroundColor Yellow
try {
  `$response = Invoke-WebRequest -Uri "http://decoded-genai-stack-webappne-websitebucket4326d7c2-jvplfkkey9mb.s3-website.eu-central-1.amazonaws.com" -UseBasicParsing
  if (`$response.StatusCode -eq 200) {
    Write-Host "‚úÖ Website accessible" -ForegroundColor Green
  }
} catch {
  Write-Host "‚ùå Website not accessible" -ForegroundColor Red
}

Write-Host "`nüéâ Verification complete!" -ForegroundColor Green
"@ | Out-File -FilePath "C:\decoded\verify-deployment.ps1" -Encoding utf8

Write-Host "üéâ DECODEDMUSIC PLATFORM AUTOMATION COMPLETE!" -ForegroundColor Green
Write-Host "`nüìä Summary:" -ForegroundColor Cyan
Write-Host "‚úÖ Lambda function tests created" -ForegroundColor White
Write-Host "‚úÖ File organization fixed" -ForegroundColor White  
Write-Host "‚úÖ package.json corrected" -ForegroundColor White
Write-Host "‚úÖ React application built" -ForegroundColor White
Write-Host "‚úÖ Deployed to S3" -ForegroundColor White
Write-Host "‚úÖ Verification script created" -ForegroundColor White

Write-Host "`nüöÄ Next steps:" -ForegroundColor Yellow
Write-Host "1. Run: C:\decoded\verify-deployment.ps1" -ForegroundColor White
Write-Host "2. Run: node C:\decoded\tests\lambda\lambda-tests.js" -ForegroundColor White
Write-Host "3. Visit: http://decoded-genai-stack-webappne-websitebucket4326d7c2-jvplfkkey9mb.s3-website.eu-central-1.amazonaws.com" -ForegroundColor White

Write-Host "`nüéµ decodedmusic Platform is ready!" -ForegroundColor Green